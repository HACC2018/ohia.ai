if (nrow(tail_data)==1) {
ggsave(sprintf('test_%d.png', i), g)
next
}
# check for tail splits
if (any(diff(tail_data$time)<0)) {
# plot left
left_data  <- tail_data[time <= start_time]
if (nrow(left_data)>1) {
g <- g +
geom_line(data = left_data,
mapping = aes(x=time, y=n_visitors, group='2a'),
colour = 'black') +
geom_line(data = left_data,
mapping = aes(x=time, y=preds, group='2a'),
colour = 'red',
linetype='dashed')
}
# plot right
right_data  <- tail_data[time > start_time]
right_data <- rbind(right_data, left_data[1][, time := 24])
g <- g +
geom_line(data = right_data,
mapping = aes(x=time, y=n_visitors, group='2b'),
colour = 'black') +
geom_line(data = right_data,
mapping = aes(x=time, y=preds, group='2b'),
colour = 'red',
linetype='dashed')
} else {
g <- g +
geom_line(data = tail_data,
mapping = aes(x=time, y=n_visitors, group='2'),
colour = 'black') +
geom_line(data = tail_data,
mapping = aes(x=time, y=preds, group='2'),
colour = 'red',
linetype='dashed')
}
# save  ---------------------------------
ggsave(sprintf('%s/plot_%0.4d.png', name, i), g)
}
f(1)
tmp <- parLapplyLB(cl, 1:nrow(DT), function(i) {
head_length <- 6
tail_length <- 12
# for (i in 1:nrow(DT)) {
# initialize ---------------------------------
start_time <- DT[i, time]
start_date <- DT[i, date]
g <- ggplot() + xlim(0, 24) + ylim(0, max(DT$upper)) +
ggtitle(sprintf('date: %s,  time: %02d:00', start_date, start_time)) +
xlab('Time (hours)') + ylab('Number of Visitors') +
geom_line(data=DT[date == start_date],
mapping=aes(x=time, y=n_visitors_seasonal, group='0'),
color='gray',
linetype='dotted')
# head ---------------------------------
head_data <- DT[i:min(i+head_length, .N)-1+1]
head_data[, alpha := 1 - 0.5^(.I %% 24)]
head_data[, upper := preds + alpha*conf_int/2]
head_data[, lower := preds - alpha*conf_int/2]
head_data[, lower := ifelse(lower<0, 0, lower)]
# check for head splits
if (any(diff(head_data$time)<0)) {
# plot left
left_data  <- head_data[time < start_time]
if (nrow(left_data)>1) {
g <- g +
geom_line(data = left_data,
mapping = aes(x=time, y=preds, group='1a'),
colour = 'blue',
linetype='dashed') +
geom_ribbon(data = left_data,
mapping = aes(x=time, ymin=lower, ymax=upper, group='1a'),
alpha = 0.3)
}
# plot right
right_data <- head_data[time>=start_time]
right_data <- rbind(right_data, left_data[1][, time := 24])
g <- g +
geom_line(data = right_data,
mapping = aes(x=time, y=preds, group='1b'),
colour = 'blue',
linetype='dashed') +
geom_ribbon(data = right_data,
mapping = aes(x=time, ymin=lower, ymax=upper, group='1b'),
alpha = 0.3)
} else {
g <- g +
geom_line(data = head_data,
mapping = aes(x=time, y=preds, group='1'),
colour = 'blue',
linetype='dashed') +
geom_ribbon(data = head_data,
mapping = aes(x=time, ymin=lower, ymax=upper, group='1'),
alpha = 0.3)
}
# tail ---------------------------------
tail_data <- DT[max(i-tail_length, 1):i]
if (nrow(tail_data)==1) {
ggsave(sprintf('test_%d.png', i), g)
return(0)
}
# check for tail splits
if (any(diff(tail_data$time)<0)) {
# plot left
left_data  <- tail_data[time <= start_time]
if (nrow(left_data)>1) {
g <- g +
geom_line(data = left_data,
mapping = aes(x=time, y=n_visitors, group='2a'),
colour = 'black') +
geom_line(data = left_data,
mapping = aes(x=time, y=preds, group='2a'),
colour = 'red',
linetype='dashed')
}
# plot right
right_data  <- tail_data[time > start_time]
right_data <- rbind(right_data, left_data[1][, time := 24])
g <- g +
geom_line(data = right_data,
mapping = aes(x=time, y=n_visitors, group='2b'),
colour = 'black') +
geom_line(data = right_data,
mapping = aes(x=time, y=preds, group='2b'),
colour = 'red',
linetype='dashed')
} else {
g <- g +
geom_line(data = tail_data,
mapping = aes(x=time, y=n_visitors, group='2'),
colour = 'black') +
geom_line(data = tail_data,
mapping = aes(x=time, y=preds, group='2'),
colour = 'red',
linetype='dashed')
}
# save  ---------------------------------
ggsave(sprintf('%s/plot_%0.4d.png', name, i), g)
return(0)
})
rm(list = ls())
VERSION <- 'logo_v3'
add_branch <- function(r, x0, y0, theta0=0) {
theta <- c(3*pi/4, pi/2, pi/4) + theta0
y <- y0 + r*sin(theta)
x <- x0 + r*cos(theta)
points(x, y, pch=16)
for (i in 1:length(x)) {
lines(c(x0, x[i]), c(y0, y[i]))
}
}
# png(sprintf('figures/%s.png', VERSION), 150, 150)
# par(pty='s', bg=NA, lwd=10, cex=2.5, col=rgb(34/255,250/255,34/255), mar=rep(0.25, 4))
plot(c(0, 0), c(0, 3), type='l', #axes=F,
xlab="", ylab="", xaxt='n', yaxt='n',
xlim=c(-sqrt(2),sqrt(2)), ylim=c(-0.5,3.5))
points(rep(0, 4), 0:3, pch=16)
add_branch(1, 0, 1, 0)
add_branch(1, 0, 2, 0)
# dev.off()
rm(list = ls())
VERSION <- 'logo_v3'
add_branch <- function(r, x0, y0, theta0=0) {
theta <- c(3*pi/4, pi/2, pi/4) + theta0
y <- y0 + r*sin(theta)
x <- x0 + r*cos(theta)
for (i in 1:length(x)) {
lines(c(x0, x[i]), c(y0, y[i]))
}
}
# png(sprintf('figures/%s.png', VERSION), 150, 150)
# par(pty='s', bg=NA, lwd=10, cex=2.5, col=rgb(34/255,250/255,34/255), mar=rep(0.25, 4))
plot(c(0, 0), c(0, 3), type='l', #axes=F,
xlab="", ylab="", xaxt='n', yaxt='n',
xlim=c(-sqrt(2),sqrt(2)), ylim=c(-0.5,3.5))
add_branch(1, 0, 1, 0)
add_branch(1, 0, 2, 0)
# dev.off()
library(grid)
x <- c(0.2, 0.2, 0.4, 0.4)
y <- c(0.2, 0.4, 0.4, 0.2)
grid.newpage()
grid.bezier(x, y)
grid.bezier(c(x, x + .4), c(y + .4, y + .4),
id=rep(1:2, each=4))
grid.segments(.4, .6, .6, .6)
grid.bezier(x, y,
gp=gpar(lwd=3, fill="black"),
arrow=arrow(type="closed"),
vp=viewport(x=.9))
grid.newpage()
grid.bezier(x, y)
install.packages('bezier')
library(bezier)
P <- cbind(
c(0, 0.25, 0.5, 0.75),
c(0, 0.25, 0.5, 0.75),
)
P <- cbind(
c(0, 0.25, 0.5, 0.75),
c(0, 0.25, 0.5, 0.75)
)
bezier(P, seq(0,1,0.1))
P
bezier(P, seq(0,1,0.1))
P <- cbind(
c(0, 0.25, 0.5, 0.75),
c(0, 1, 1, 0)
)
bezier(P, seq(0,1,0.1))
bezier(P, seq(0,10,0.1))
bezier(P, seq(0,1,0.1), 10)
P <- matrix(c(0, 1, 2, 2, 2, 0, 3, 2),4,2)
P
xy <- bezier(P,n=100)
dx <- bezier_deriv(P,n=100)
library(bezier)
dx <- bezier_deriv(P,n=100)
P <- matrix(c(0, 1, 2, 2, 2, 0, 3, 2),4,2)
xy <- bezier(P,n=100)
library(bezier)
x <- c(0.2, 0.2, 0.4, 0.4)
y <- c(0.2, 0.4, 0.4, 0.2)
grid.newpage()
grid.bezier(x, y)
rm(list = ls())
VERSION <- 'logo_v3'
x <- c(0.2, 0.2, 0.4, 0.4)
y <- c(0.2, 0.4, 0.4, 0.2)
grid.circle(x=0.5, y=0.5, r=0.5, default.units="npc", name=NULL,
gp=gpar(), draw=TRUE, vp=NULL)
grid.newpage()
library(grid)
VERSION <- 'logo_v3'
x <- c(0.2, 0.2, 0.4, 0.4)
y <- c(0.2, 0.4, 0.4, 0.2)
grid.circle(x=0.5, y=0.5, r=0.5, default.units="npc", name=NULL,
gp=gpar(), draw=TRUE, vp=NULL)
grid.newpage()
grid.circle(x=0.5, y=0.5, r=0.5, default.units="npc", name=NULL,
gp=gpar(), draw=TRUE, vp=NULL)
grid.newpage()
grid.bezier(x, y)
grid.circle(x=0.5, y=0.5, r=0.5, default.units="npc", name=NULL,
gp=gpar(), draw=TRUE, vp=NULL)
# png(sprintf('figures/%s.png', VERSION), 150, 150)
par(pty='s', bg=NA, lwd=10, cex=2.5, col=rgb(34/255,250/255,34/255), mar=rep(0.25, 4))
grid.newpage()
grid.bezier(x, y)
grid.circle(x=0.5, y=0.5, r=0.5, default.units="npc", name=NULL,
gp=gpar(), draw=TRUE, vp=NULL)
par(pty='s', bg=NA, lwd=10, cex=2.5, col=rgb(34/255,250/255,34/255), mar=rep(0.25, 4))
grid.circle(x=0.5, y=0.5, r=0.5, default.units="npc", name=NULL,
gp=gpar(), draw=TRUE, vp=NULL)
grid.newpage()
grid.bezier(x, y)
add_berry <- function(r, x0, y0, color='gold') {
}
dir(sprintf('data/plantnet', d), recursive=T, full.names=T, all.files = T)
dir('data/plantnet', recursive=T, full.names=T, all.files = T)
dir('data/plantnet', recursive=T, full.names=T, all.files = T)
setwd('repos/ohia.ai/')
dir('data/plantnet', recursive=T, full.names=T, all.files = T)
dir_list <- dir('data/plantnet', full.names=T)
plant_count <- sapply(dir_list, function(d) lengthdir(d))
dir_list <- dir('data/plantnet', full.names=T)
plant_count <- sapply(dir_list, function(d) length(dir(d)))
plant_count
names(plant_count[plant_count>100])
file_list <- sapply(names(plant_count[plant_count>100]), dir, full.names=T)
file_list <- unlist(sapply(names(plant_count[plant_count>100]), dir, full.names=T))
file_list
file_list <- as.character(unlist(sapply(names(plant_count[plant_count>100]), dir, full.names=T)))
remove_list <- as.character(unlist(sapply(names(plant_count[plant_count<100]), dir, full.names=T)))
library(parallel)
?parLapply
cl <- makeCluster(20)
parLapply(cl, file_list, function(f) {
file.rename(f, sub('plantnet', 'filtered_plantnet', f))
})
head(file_list)
keep_plants <- names(plant_count[plant_count>100])
keep_plants <- names(plant_count[plant_count>=100])
file_list <- as.character(unlist(sapply(keep_plants, dir, full.names=T)))
for (d in keep_plants) {
dir.create(sub('plantnet', 'filtered_plantnet', d))
}
parLapply(cl, file_list, function(f) {
file.copy(f, sub('plantnet', 'filtered_plantnet', f))
})
stopCluster(cl)
dir('')
dir()
dir('figures', 'wellclassifed')
for (f in dir('figures', 'wellclassifed', full.names = T)) file.remove(f)
for (f in dir('figures', 'wellclassified', full.names = T)) file.remove(f)
for (f in dir('figures', 'misclassified', full.names = T)) file.remove(f)
for (f in dir('figures', 'plot', full.names = T)) file.remove(f)
dir('data', 'preprcessed', full.names = T)
dir('data', 'preprcessed', full.names = T, recursive = T)
dir('data/preprocessed_images')
dir('data/preprocessed_images/scraped_filtered')
plant_list <- dir('data/preprocessed_images/scraped_filtered')
plant_list <- dir('data/preprocessed_images/scraped_filtered')
for (p in plant_list) {
dir.create(sprintf('machine_learning/results/%s', p))
}
results <- fread('machine_learning/results/results.csv')
library(data.table)
results <- fread('machine_learning/results/results.csv')
results
setwd('machine_learning/')
template <- fread('results/template.md')
template <- readLines('results/template.md')
template
results
results <- fread('results/results.csv')
results
template
for (plant in results$labels) {
break
template <- readLines('results/template.md')
template <- sapply(template, function(x) gsub('PLANT_PLACEHOLDER', plant, x))
}
template <- readLines('results/template.md')
template <- sapply(template, function(x) gsub('PLANT_PLACEHOLDER', plant, x))
template
template <- readLines('results/template.md')
template
class(template)
template <- sapply(template, function(x) gsub('PLANT_PLACEHOLDER', plant, x))
class(template)
template
template <- sapply(template, function(x) gsub('PLANT_PLACEHOLDER', plant, x), simplify = F)
template <- readLines('results/template.md')
template <- sapply(template, function(x) gsub('PLANT_PLACEHOLDER', plant, x), simplify = F)
template
template <- readLines('results/template.md')
template
template <- sapply(template, function(x) gsub('PLANT_PLACEHOLDER', plant, x), simplify = F)
template
template <- readLines('results/template.md')
lapply(template, function(x) gsub('PLANT_PLACEHOLDER', plant, x))
template <- readLines('results/template.md')
template
lapply(template, function(x) gsub('PLANT_PLACEHOLDER', plant, x))
template <- readLines('results/template.md')
template <- lapply(template, function(x) gsub('PLANT_PLACEHOLDER', plant, x))
results
with(results, {
template <- readLines('results/template.md')
template <- lapply(template, function(x) gsub('PLANT_PLACEHOLDER', plant, x))
template <- lapply(template, function(x) gsub('TOP_1_PLACEHOLDER', top_1, x))
template <- lapply(template, function(x) gsub('TOP_3_PLACEHOLDER', top_3, x))
template <- lapply(template, function(x) gsub('TOP_5_PLACEHOLDER', top_5, x))
})
with(results[labels==plant], {
template <- readLines('results/template.md')
template <- lapply(template, function(x) gsub('PLANT_PLACEHOLDER', plant, x))
template <- lapply(template, function(x) gsub('TOP_1_PLACEHOLDER', top_1, x))
template <- lapply(template, function(x) gsub('TOP_3_PLACEHOLDER', top_3, x))
template <- lapply(template, function(x) gsub('TOP_5_PLACEHOLDER', top_5, x))
})
template
DT <- results[labels==plant]
template <- readLines('results/template.md')
template <- lapply(template, function(x) gsub('PLANT_PLACEHOLDER', plant, x))
template <- lapply(template, function(x) gsub('TOP_1_PLACEHOLDER', DT$top_1, x))
template <- lapply(template, function(x) gsub('TOP_3_PLACEHOLDER', DT$top_3, x))
template <- lapply(template, function(x) gsub('TOP_5_PLACEHOLDER', DT$top_5, x))
template
find_replace <- function(x, f, r) {
lapply(x, function(xi) gsub(f, r, xi))
}
DT <- results[labels==plant]
template <- readLines('results/template.md')
template <- find_replace(template, 'PLANT_PLACEHOLDER', plant)
template <- find_replace(template, 'TOP_1_PLACEHOLDER', sprintf('%0.2f%%', 100*DT$top_1))
template <- find_replace(template, 'TOP_3_PLACEHOLDER', sprintf('%0.2f%%', 100*DT$top_3))
template <- find_replace(template, 'TOP_5_PLACEHOLDER', sprintf('%0.2f%%', 100*DT$top_5))
template
sprintf('results/%s/README.md', plant)
library(data.table)
results <- fread('results/results.csv')
find_replace <- function(x, f, r) {
lapply(x, function(xi) gsub(f, r, xi))
}
for (plant in results$labels) {
DT <- results[labels==plant]
template <- readLines('results/template.md')
template <- find_replace(template, 'PLANT_PLACEHOLDER', plant)
template <- find_replace(template, 'TOP_1_PLACEHOLDER', sprintf('%0.2f%%', 100*DT$top_1))
template <- find_replace(template, 'TOP_3_PLACEHOLDER', sprintf('%0.2f%%', 100*DT$top_3))
template <- find_replace(template, 'TOP_5_PLACEHOLDER', sprintf('%0.2f%%', 100*DT$top_5))
f <- file(sprintf('results/%s/README.md', plant))
writeLines(template, f)
close(f)
break
}
library(data.table)
results <- fread('results/results.csv')
find_replace <- function(x, f, r) {
lapply(x, function(xi) gsub(f, r, xi))
}
for (plant in results$labels) {
DT <- results[labels==plant]
template <- readLines('results/template.md')
template <- find_replace(template, 'PLANT_PLACEHOLDER', plant)
template <- find_replace(template, 'TOP_1_PLACEHOLDER', sprintf('%0.2f%%', 100*DT$top_1))
template <- find_replace(template, 'TOP_3_PLACEHOLDER', sprintf('%0.2f%%', 100*DT$top_3))
template <- find_replace(template, 'TOP_5_PLACEHOLDER', sprintf('%0.2f%%', 100*DT$top_5))
f <- file(sprintf('results/%s/README.md', plant))
for (x in template) writeLines(x, f)
close(f)
break
}
template
close(f)
template
as.character(template)
library(data.table)
results <- fread('results/results.csv')
find_replace <- function(x, f, r) {
lapply(x, function(xi) gsub(f, r, xi))
}
for (plant in results$labels) {
DT <- results[labels==plant]
template <- readLines('results/template.md')
template <- find_replace(template, 'PLANT_PLACEHOLDER', plant)
template <- find_replace(template, 'TOP_1_PLACEHOLDER', sprintf('%0.2f%%', 100*DT$top_1))
template <- find_replace(template, 'TOP_3_PLACEHOLDER', sprintf('%0.2f%%', 100*DT$top_3))
template <- find_replace(template, 'TOP_5_PLACEHOLDER', sprintf('%0.2f%%', 100*DT$top_5))
f <- file(sprintf('results/%s/README.md', plant))
writeLines(as.character(template), f)
close(f)
break
}
library(data.table)
results <- fread('results/results.csv')
find_replace <- function(x, f, r) {
lapply(x, function(xi) gsub(f, r, xi))
}
for (plant in results$labels) {
DT <- results[labels==plant]
template <- readLines('results/template.md')
template <- find_replace(template, 'PLANT_PLACEHOLDER', plant)
template <- find_replace(template, 'TOP_1_PLACEHOLDER', sprintf('%0.2f%%', 100*DT$top_1))
template <- find_replace(template, 'TOP_3_PLACEHOLDER', sprintf('%0.2f%%', 100*DT$top_3))
template <- find_replace(template, 'TOP_5_PLACEHOLDER', sprintf('%0.2f%%', 100*DT$top_5))
f <- file(sprintf('results/%s/README.md', plant))
writeLines(as.character(template), f)
close(f)
}
library(data.table)
results <- fread('results/results.csv')
find_replace <- function(x, f, r) {
lapply(x, function(xi) gsub(f, r, xi))
}
for (plant in results$labels) {
DT <- results[labels==plant]
template <- readLines('results/template.md')
template <- find_replace(template, 'PLANT_PLACEHOLDER', plant)
template <- find_replace(template, 'TOP_1_PLACEHOLDER', sprintf('%0.2f%%', 100*DT$top_1))
template <- find_replace(template, 'TOP_3_PLACEHOLDER', sprintf('%0.2f%%', 100*DT$top_3))
template <- find_replace(template, 'TOP_5_PLACEHOLDER', sprintf('%0.2f%%', 100*DT$top_5))
f <- file(sprintf('results/%s/README.md', plant))
writeLines(as.character(template), f)
close(f)
}
results
library(data.table)
results <- fread('results/results.csv')
find_replace <- function(x, f, r) {
lapply(x, function(xi) gsub(f, r, xi))
}
for (plant in results$labels) {
DT <- results[labels==plant]
template <- readLines('results/template.md')
template <- find_replace(template, 'PLANT_PLACEHOLDER', plant)
template <- find_replace(template, 'TOP_1_PLACEHOLDER', sprintf('%0.2f%%', 100*DT$top_1))
template <- find_replace(template, 'TOP_3_PLACEHOLDER', sprintf('%0.2f%%', 100*DT$top_3))
template <- find_replace(template, 'TOP_5_PLACEHOLDER', sprintf('%0.2f%%', 100*DT$top_5))
template <- find_replace(template, 'COUNT_PLACEHOLDER', DT$counts)
f <- file(sprintf('results/%s/README.md', plant))
writeLines(as.character(template), f)
close(f)
}
results
setwd('..')
meta <- fread('data/plant_meta_v5.csv')
meta
lapply(meta$plant_name, function(plant) dir('data/raw_images/', plant, recursive=T))
counts <- sapply(
setNames(meta$plant_name, meta$plant_name),
function(plant) {
dir_name <- sprintf('data/raw_images/%s', plant)
length(dir(dir_name, recursive=T) )
}
)
counts
meta$plant_name
counts <- sapply(
setNames(meta$plant_name, meta$plant_name),
function(plant) {
dir_name <- sprintf('data/raw_images/scraped_filtered/%s', plant)
length(dir(dir_name, recursive=T))
}
)
counts
