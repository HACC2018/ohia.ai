dygraph(DT[, .(date_time, n_visitors)])
dygraph(DT[, .(date_time, n_requests)])
dygraph(DT[, .(date_time, probe_counts)])
dygraph(DT[, .(date_time, device_counts)])
dygraph(DT[, .(date_time, vendor_counts)])
cor(DT[, .(n_visitors, n_requests, probe_counts, device_counts, vendor_counts)])
dygraph(DT[, .(date_time, n_visitors)])
DT <- load_data('preprocessed')
DT
require(mxnet)
install.packages('mxnet')
devtools::install_github('catboost/catboost', subdir = 'catboost/R-package')
install.packages("keras")
library(keras)
install_keras()
cran <- getOption("repos")
cran["dmlc"] <- "https://apache-mxnet.s3-accelerate.dualstack.amazonaws.com/R/CRAN/"
options(repos = cran)
install.packages("mxnet")
DT
DT[, .(.N), by=collector_id]
DT[, .(uniqueN(date)), by=collector_id]
library(forecast)
gasoline
dataset(gasoline)
datasets::gasoline
datasets::gasoline()
datasets('gasoline')
forecast(ausbeer, h=4)
autoplot(a10)
install.packages('fpp2')
library(forecast)
autoplot(a10)
h02 %>% ets() %>% forecast() %>% summary()
library(fpp2)
autoplot(a10)
h02 %>% ets() %>% forecast() %>% summary()
gasoline %>% stlf() %>% autoplot()
stlf
>stlf
stlf
gasoline
DT <- load_data('preprocessed')
DT
DT <- DT[collector_id=='b8:27:eb:0d:21:43']
DT
DT <- load_data('preprocessed')
DT <- DT[collector_id=='b8:27:eb:0d:21:43']
DT[, date_time := sprintf('%s %02d:00:00', date, time-1)]
DT[, date_time := ymd_hms(date_time)]
DT[, ts(n_visitors, start=min(date_time))]
DT[, ts(n_visitors)]
plot(DT[, ts(n_visitors)])
DT[, ts(n_visitors)] %>% stlf() %>% autoplot()
DT[, ts(n_visitors)] %>%  ets() %>% forecast() %>% summary()
DT[, ts(n_visitors)] %>%  ets() %>% forecast() %>% autoplot()
ets
DT[, ts(n_visitors)] %>%  stlf() %>% forecast() %>% autoplot()
?stlf
DT[, stl(n_visitors)] %>%  stlf() %>% forecast() %>% autoplot()
DT[, stl(n_visitors, 24)] %>%  stlf() %>% forecast() %>% autoplot()
DT
DT[, stl(n_visitors, 1)] %>%  stlf() %>% forecast() %>% autoplot()
euretail
euretail %>% diff(lag=4) %>% ggtsdisplay()
euretail %>% diff(lag=4)
euretail %>% diff(lag=4) %>% diff() %>% ggtsdisplay()
euretail %>%
Arima(order=c(0,1,1), seasonal=c(0,1,1)) %>%
residuals() %>% ggtsdisplay()
euretail %>%
Arima(order=c(0,1,1), seasonal=c(0,1,1)) %>%
autoplot()
euretail[,1]
euretail$Qtr1 %>%
Arima(order=c(0,1,1), seasonal=c(0,1,1)) %>%
autoplot()
euretail
dim(euretail)
euretail
class(euretail)
?ts
euretail$Qtr1
euretail[1:2]
?mts
# load data --------------------
load_data <- function(file_name, ...) {
file_path <- '/home/matt/repos/basyc-ideas/data/'
fread(sprintf('%s/%s.csv', file_path, file_name), ...)
}
DT <- load_data('preprocessed')
DT <- DT[collector_id=='b8:27:eb:0d:21:43']
DT[, date_time := sprintf('%s %02d:00:00', date, time-1)]
DT[, date_time := ymd_hms(date_time)]
DT
# feature engineering  --------------------
cat('Processing:\n')
data[, dow := weekdays(ymd(date), abbreviate=T)]
data
# feature engineering  --------------------
cat('Processing:\n')
DT[, dow := weekdays(ymd(date), abbreviate=T)]
DT[, workday := !(dow %in% c('Sun', 'Sat'))]
# create target information
target_day <- max(DT$date) + as.difftime(1, units='days')
DT
library(data.table)
library(lubridate)
library(matrixStats)
library(dygraphs)
library(plotly)
library(fpp2)
cl <- makeCluster(30)
library(parallel)
cl <- makeCluster(30)
# load data --------------------
load_data <- function(file_name, ...) {
file_path <- '/home/matt/repos/basyc-ideas/data/'
fread(sprintf('%s/%s.csv', file_path, file_name), ...)
}
full_data <- load_data('preprocessed', drop='collector_id')
full_data[, date := ymd(date)]
for (name in full_data[, unique(collector_name)]) {
# subset data
print(name)
DT <- full_data[collector_name==name, -'collector_name', with=F]
# feature engineering --------------------
feature_cols <- c('n_visitors', 'n_requests', 'probe_counts', 'device_counts')
DT <- copy(DT)[
, paste0(feature_cols, '_seasonal') := lapply(.SD, mean)
, by=time, .SDcols=feature_cols]
# lag features
for (f in feature_cols) {
if (f == 'n_visitors') {
for (i in c(12,24)) {
set(DT,
j = sprintf('%s_lag%d', f, i),
value = shift(DT[[f]], i))
}
} else {
for (i in c(1:6,12,24)) {
set(DT,
j = sprintf('%s_lag%d', f, i),
value = shift(DT[[f]], i))
}
for (i in c(12, 24)) {
set(DT,
j = sprintf('%s_ma%d', f, i),
value = as.numeric(stats::filter(DT[[f]], rep(1/i, i), sides=1)))
}
}
}
# modeling --------------------
keep_dates <- DT[complete.cases(DT), unique(date)]
DT <- DT[date %in% keep_dates]
# fit model
lm_fit <- lm(n_visitors~.-date, DT)
summary(lm_fit)
# make predictions
DT[, preds := predict(lm_fit, DT)]
DT[, preds := ifelse(preds<0, 0, preds)]
# DT <- DT[1:48, .(date, time, n_visitors, preds, n_visitors_seasonal)]
# confidence intervals
DT[, std_err := sd(preds-n_visitors), by=time]
DT[, conf_int := as.numeric(stats::filter(std_err, rep(1, 6), sides=1))]
DT[is.na(conf_int), conf_int := 50]
DT[conf_int<50, conf_int := 50]
DT[conf_int>100, conf_int := 100]
DT[, upper := preds + conf_int/2]
DT[, lower := preds - conf_int/2]
DT[lower<0, lower := 0]
# plot results --------------------
clusterExport(cl, c('DT', 'name'))
tmp <- parLapplyLB(cl, 1:nrow(DT), function(i) {
head_length <- 6
tail_length <- 12
# for (i in 1:nrow(DT)) {
# initialize ---------------------------------
start_time <- DT[i, time]
start_date <- DT[i, date]
g <- ggplot() + xlim(0, 24) + ylim(0, max(DT$upper)) +
ggtitle(sprintf('date: %s,  time: %02d:00', start_date, start_time)) +
xlab('Time (hours)') + ylab('Number of Visitors') +
geom_line(data=DT[date == start_date],
mapping=aes(x=time, y=n_visitors_seasonal, group='0'),
color='gray',
linetype='dotted')
# head ---------------------------------
head_data <- DT[i:min(i+head_length, .N)-1+1]
head_data[, alpha := 1 - 0.5^(.I %% 24)]
head_data[, upper := preds + alpha*conf_int/2]
head_data[, lower := preds - alpha*conf_int/2]
head_data[, lower := ifelse(lower<0, 0, lower)]
# check for head splits
if (any(diff(head_data$time)<0)) {
# plot left
left_data  <- head_data[time < start_time]
if (nrow(left_data)>1) {
g <- g +
geom_line(data = left_data,
mapping = aes(x=time, y=preds, group='1a'),
colour = 'blue',
linetype='dashed') +
geom_ribbon(data = left_data,
mapping = aes(x=time, ymin=lower, ymax=upper, group='1a'),
alpha = 0.3)
}
# plot right
right_data <- head_data[time>=start_time]
right_data <- rbind(right_data, left_data[1][, time := 24])
g <- g +
geom_line(data = right_data,
mapping = aes(x=time, y=preds, group='1b'),
colour = 'blue',
linetype='dashed') +
geom_ribbon(data = right_data,
mapping = aes(x=time, ymin=lower, ymax=upper, group='1b'),
alpha = 0.3)
} else {
g <- g +
geom_line(data = head_data,
mapping = aes(x=time, y=preds, group='1'),
colour = 'blue',
linetype='dashed') +
geom_ribbon(data = head_data,
mapping = aes(x=time, ymin=lower, ymax=upper, group='1'),
alpha = 0.3)
}
# tail ---------------------------------
tail_data <- DT[max(i-tail_length, 1):i]
if (nrow(tail_data)==1) {
ggsave(sprintf('test_%d.png', i), g)
next
}
# check for tail splits
if (any(diff(tail_data$time)<0)) {
# plot left
left_data  <- tail_data[time <= start_time]
if (nrow(left_data)>1) {
g <- g +
geom_line(data = left_data,
mapping = aes(x=time, y=n_visitors, group='2a'),
colour = 'black') +
geom_line(data = left_data,
mapping = aes(x=time, y=preds, group='2a'),
colour = 'red',
linetype='dashed')
}
# plot right
right_data  <- tail_data[time > start_time]
right_data <- rbind(right_data, left_data[1][, time := 24])
g <- g +
geom_line(data = right_data,
mapping = aes(x=time, y=n_visitors, group='2b'),
colour = 'black') +
geom_line(data = right_data,
mapping = aes(x=time, y=preds, group='2b'),
colour = 'red',
linetype='dashed')
} else {
g <- g +
geom_line(data = tail_data,
mapping = aes(x=time, y=n_visitors, group='2'),
colour = 'black') +
geom_line(data = tail_data,
mapping = aes(x=time, y=preds, group='2'),
colour = 'red',
linetype='dashed')
}
# save  ---------------------------------
ggsave(sprintf('%s/plot_%0.4d.png', name, i), g)
})
}
# geom_line(data=old_data, aes(y=n_visitors, x=time), color='black') +
# geom_line(data=old_data, aes(y=preds, x=time), color='red',  linetype='dashed') +
# geom_line(data=new_data, aes(y=preds, x=time), color='blue', linetype='dashed') +
# geom_ribbon(data=new_data, aes(ymin=lower, ymax=upper, x=time), alpha = 0.3) +
# theme(legend.position = c(0, 250))
# p <- ggplotly()
# scale_colour_manual("",values="blue")+
# scale_fill_manual("",values="grey12")
# # plot results
# plot(0, type='n',  xlim=c(0, 24),
#      ylim=DT[, range(preds, n_visitors)],
#      main=sprintf('time: %02d:00', i),
#      xlab='Time (hours)', ylab='Popularity')
# lines(subset_data[, .(time, n_visitors_seasonal)], lty=3)
# lines(old_data[, .(time, n_visitors)], lty=1)
# lines(old_data[, .(time, preds)], lty=2, col='red')
# lines(new_data[, .(time, preds)], lty=2, col='blue')
# lines(new_data[, .(time, upper)], col='gray')
# lines(new_data[, .(time, lower)], col='gray')
# # body
# for (i in 1:N) {
#   body_inds <- max(i-body_length, 1):i
#   print(body_inds)
# }
#
# # head
# for (i in 1:N) {
#   head_inds <- i:min(i+horizon, N)
#   print(head_inds)
# }
# select_date <- DT[, sample(date, 1)]
# for (i in 1:24) {
#   plot_forecast(DT, select_date, i)
# }
1:nrow(DT)
f <- function(i) {
head_length <- 6
tail_length <- 12
# for (i in 1:nrow(DT)) {
# initialize ---------------------------------
start_time <- DT[i, time]
start_date <- DT[i, date]
g <- ggplot() + xlim(0, 24) + ylim(0, max(DT$upper)) +
ggtitle(sprintf('date: %s,  time: %02d:00', start_date, start_time)) +
xlab('Time (hours)') + ylab('Number of Visitors') +
geom_line(data=DT[date == start_date],
mapping=aes(x=time, y=n_visitors_seasonal, group='0'),
color='gray',
linetype='dotted')
# head ---------------------------------
head_data <- DT[i:min(i+head_length, .N)-1+1]
head_data[, alpha := 1 - 0.5^(.I %% 24)]
head_data[, upper := preds + alpha*conf_int/2]
head_data[, lower := preds - alpha*conf_int/2]
head_data[, lower := ifelse(lower<0, 0, lower)]
# check for head splits
if (any(diff(head_data$time)<0)) {
# plot left
left_data  <- head_data[time < start_time]
if (nrow(left_data)>1) {
g <- g +
geom_line(data = left_data,
mapping = aes(x=time, y=preds, group='1a'),
colour = 'blue',
linetype='dashed') +
geom_ribbon(data = left_data,
mapping = aes(x=time, ymin=lower, ymax=upper, group='1a'),
alpha = 0.3)
}
# plot right
right_data <- head_data[time>=start_time]
right_data <- rbind(right_data, left_data[1][, time := 24])
g <- g +
geom_line(data = right_data,
mapping = aes(x=time, y=preds, group='1b'),
colour = 'blue',
linetype='dashed') +
geom_ribbon(data = right_data,
mapping = aes(x=time, ymin=lower, ymax=upper, group='1b'),
alpha = 0.3)
} else {
g <- g +
geom_line(data = head_data,
mapping = aes(x=time, y=preds, group='1'),
colour = 'blue',
linetype='dashed') +
geom_ribbon(data = head_data,
mapping = aes(x=time, ymin=lower, ymax=upper, group='1'),
alpha = 0.3)
}
# tail ---------------------------------
tail_data <- DT[max(i-tail_length, 1):i]
if (nrow(tail_data)==1) {
ggsave(sprintf('test_%d.png', i), g)
next
}
# check for tail splits
if (any(diff(tail_data$time)<0)) {
# plot left
left_data  <- tail_data[time <= start_time]
if (nrow(left_data)>1) {
g <- g +
geom_line(data = left_data,
mapping = aes(x=time, y=n_visitors, group='2a'),
colour = 'black') +
geom_line(data = left_data,
mapping = aes(x=time, y=preds, group='2a'),
colour = 'red',
linetype='dashed')
}
# plot right
right_data  <- tail_data[time > start_time]
right_data <- rbind(right_data, left_data[1][, time := 24])
g <- g +
geom_line(data = right_data,
mapping = aes(x=time, y=n_visitors, group='2b'),
colour = 'black') +
geom_line(data = right_data,
mapping = aes(x=time, y=preds, group='2b'),
colour = 'red',
linetype='dashed')
} else {
g <- g +
geom_line(data = tail_data,
mapping = aes(x=time, y=n_visitors, group='2'),
colour = 'black') +
geom_line(data = tail_data,
mapping = aes(x=time, y=preds, group='2'),
colour = 'red',
linetype='dashed')
}
# save  ---------------------------------
ggsave(sprintf('%s/plot_%0.4d.png', name, i), g)
}
f(1)
tmp <- parLapplyLB(cl, 1:nrow(DT), function(i) {
head_length <- 6
tail_length <- 12
# for (i in 1:nrow(DT)) {
# initialize ---------------------------------
start_time <- DT[i, time]
start_date <- DT[i, date]
g <- ggplot() + xlim(0, 24) + ylim(0, max(DT$upper)) +
ggtitle(sprintf('date: %s,  time: %02d:00', start_date, start_time)) +
xlab('Time (hours)') + ylab('Number of Visitors') +
geom_line(data=DT[date == start_date],
mapping=aes(x=time, y=n_visitors_seasonal, group='0'),
color='gray',
linetype='dotted')
# head ---------------------------------
head_data <- DT[i:min(i+head_length, .N)-1+1]
head_data[, alpha := 1 - 0.5^(.I %% 24)]
head_data[, upper := preds + alpha*conf_int/2]
head_data[, lower := preds - alpha*conf_int/2]
head_data[, lower := ifelse(lower<0, 0, lower)]
# check for head splits
if (any(diff(head_data$time)<0)) {
# plot left
left_data  <- head_data[time < start_time]
if (nrow(left_data)>1) {
g <- g +
geom_line(data = left_data,
mapping = aes(x=time, y=preds, group='1a'),
colour = 'blue',
linetype='dashed') +
geom_ribbon(data = left_data,
mapping = aes(x=time, ymin=lower, ymax=upper, group='1a'),
alpha = 0.3)
}
# plot right
right_data <- head_data[time>=start_time]
right_data <- rbind(right_data, left_data[1][, time := 24])
g <- g +
geom_line(data = right_data,
mapping = aes(x=time, y=preds, group='1b'),
colour = 'blue',
linetype='dashed') +
geom_ribbon(data = right_data,
mapping = aes(x=time, ymin=lower, ymax=upper, group='1b'),
alpha = 0.3)
} else {
g <- g +
geom_line(data = head_data,
mapping = aes(x=time, y=preds, group='1'),
colour = 'blue',
linetype='dashed') +
geom_ribbon(data = head_data,
mapping = aes(x=time, ymin=lower, ymax=upper, group='1'),
alpha = 0.3)
}
# tail ---------------------------------
tail_data <- DT[max(i-tail_length, 1):i]
if (nrow(tail_data)==1) {
ggsave(sprintf('test_%d.png', i), g)
return(0)
}
# check for tail splits
if (any(diff(tail_data$time)<0)) {
# plot left
left_data  <- tail_data[time <= start_time]
if (nrow(left_data)>1) {
g <- g +
geom_line(data = left_data,
mapping = aes(x=time, y=n_visitors, group='2a'),
colour = 'black') +
geom_line(data = left_data,
mapping = aes(x=time, y=preds, group='2a'),
colour = 'red',
linetype='dashed')
}
# plot right
right_data  <- tail_data[time > start_time]
right_data <- rbind(right_data, left_data[1][, time := 24])
g <- g +
geom_line(data = right_data,
mapping = aes(x=time, y=n_visitors, group='2b'),
colour = 'black') +
geom_line(data = right_data,
mapping = aes(x=time, y=preds, group='2b'),
colour = 'red',
linetype='dashed')
} else {
g <- g +
geom_line(data = tail_data,
mapping = aes(x=time, y=n_visitors, group='2'),
colour = 'black') +
geom_line(data = tail_data,
mapping = aes(x=time, y=preds, group='2'),
colour = 'red',
linetype='dashed')
}
# save  ---------------------------------
ggsave(sprintf('%s/plot_%0.4d.png', name, i), g)
return(0)
})
setwd('repos/ohia.ai/')
for (d in dir('data/images', full.names=T)) {
dir.create(sub('images', 'preprocessed_images', d), F)
}
