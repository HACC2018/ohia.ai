plantnet_meta <- rbind(load_meta('train'), load_meta('test'))
fwrite(plantnet_meta, 'data/external/clef/plantnet_meta.csv')
# load local meta
local_meta <- fread('data/plant_meta_v3.csv')
local_meta[, .(species, genus, common_name, status)]
# find intersection between local and plantnet
meta <- plantnet_meta[Genus %in% local_meta$genus]
plantnet_meta
# find intersection between local and plantnet
meta <- plantnet_meta[Genus %in% local_meta$genus]
meta
meta[, unique(Genus)]
# copy images in intersectiion
for (g in meta[, unique(Genus)]) {
print(g)
dir.create(sprintf('data/images/%s', g), showWarnings=F)
for (id in meta[Genus == g, ObservationId]) {
# file.copy(
#   sprintf('data/external/clef/images/%s.jpg', id),
#   sprintf('data/images/%s/%s.jpg', g, id)
# )
}
}
meta
try_download <- function(f, url1, url2) {
tryCatch({
download.file(url1, f, mode='wb')
},
error = function(cond) {
tryCatch(download.file(url2, f, mode='wb'))
})
}
try_download('data/images/tmp.jpg',
'http://media.eol.org/content/2013/08/26/15/41122_orig.jpg',
'http://otmedia.lirmm.fr/LifeCLEF/b/w/113242/1096362.jpg')
library(data.table)
library(parallel)
# load meta data
load_meta <- function(dataset) {
select_cols <- c(
"Species", "Origin", "OriginalUrl", "Genus", "Family", "ObservationId",
"MediaId", "YearInCLEF", "LearnTag", "ClassId", "BackUpLink")
file_name <- ifelse(
dataset == 'train',
'data/external/clef/PlantCLEF2017TrainWeb.csv',
'data/external/clef/PlantCLEF2017OnlyTest.csv'  )
fread(file_name, select=select_cols)
}
plantnet_meta <- rbind(load_meta('train'), load_meta('test'))
?clusterMap()
plantnet_meta
# download all images
try_download <- function(f, url1, url2) {
tryCatch({
download.file(url1, f, mode='wb')
},
error = function(cond) {
tryCatch({
if (!is.na(url2)) {
download.file(url2, f, mode='wb')
}
})
})
}
file_list <- plantnet_meta[, sprintf('data/external/plantnet/downloads/%s.jpg', ObservationId)]
file_list
plantnet_meta
# download images
try_download <- function(f, url1, url2) {
tryCatch({
download.file(url1, f, mode='wb')
},
error = function(cond) {
tryCatch({
if (!is.na(url2)) {
download.file(url2, f, mode='wb')
}
})
})
}
cl <- makeCluster(7)
# make directories
for (g in unique(meta$Genus)) {
dir.create(sprintf('data/plantnet/%s', g))
}
# download images
try_download <- function(f, url1, url2) {
tryCatch({
download.file(url1, f, mode='wb')
},
error = function(cond) {
tryCatch({
if (!is.na(url2)) {
download.file(url2, f, mode='wb')
}
})
})
}
cl <- makeCluster(7)
x <- clusterMap(
cl, try_download,
plantnet_meta[, sprintf('data/plantnet/%s/%s.jpg', Genus, ObservationId)],
plantnet_meta[, OriginalUrl],
plantnet_meta[, BackUpLink]
)
stopCluster(cl)
# copy images in intersection
for (g in meta[, unique(Genus)]) {
print(g)
dir.create(sprintf('data/images/%s', g), showWarnings=F)
for (id in meta[Genus == g, ObservationId]) {
file.copy(
sprintf('data/external/clef/images/%s.jpg', id),
sprintf('data/images/%s/%s.jpg', g, id)
)
}
}
library(xml2)
# load meta data
file_list <- dir('data/external/plantnet/xml')
length(file_list)
fid <- file_list[1]
fid
# load meta data
file_path <- 'data/external/plantnet/xml'
fid
x <- read_xml(fid, options='HUGE')
x <- read_xml(sprintf('%s/%s', file_path, fid), options='HUGE')
x
# load meta data
lookup_fields <- c('FileName', 'Species', 'Genus', 'Family', 'ObservationId', 'MediaId', 'ClassId')
x <- read_xml(sprintf('%s/%s', file_path, fid), options='HUGE')
data.table(t(lapply(lookup_fields, function(f) {
xml_find_all(sprintf('//%s', f)) %>% xml_text()
})))
# load meta data
lookup_fields <- c('FileName', 'Species', 'Genus', 'Family', 'ObservationId', 'MediaId', 'ClassId')
x <- read_xml(sprintf('%s/%s', file_path, fid), options='HUGE')
data.table(t(lapply(lookup_fields, function(f) {
xml_find_all(sprintf('//%s', f)) %>% xml_text()
})))
data.table(t(lapply(lookup_fields, function(f) {
xml_find_all(x, sprintf('//%s', f)) %>% xml_text()
})))
data.table(t(lapply(
setNames(lookup_fields, lookup_fields),
function(f) xml_find_all(x, sprintf('//%s', f)) %>% xml_text()
)))
# load meta data
lookup_fields <- c('FileName', 'Species', 'Genus', 'Family', 'ObservationId', 'MediaId', 'ClassId')
lookup_fields <- setNames(lookup_fields, lookup_fields)
# load meta data
lookup_fields <- c('FileName', 'Species', 'Genus', 'Family', 'ObservationId', 'MediaId', 'ClassId')
# load meta data
LOOKUP_FIELDS <- c('FileName', 'Species', 'Genus', 'Family', 'ObservationId', 'MediaId', 'ClassId')
LOOKUP_FIELDS <- setNames(LOOKUP_FIELDS, LOOKUP_FIELDS)
# load meta data
LOOKUP_FIELDS <- c('FileName', 'Species', 'Genus', 'Family', 'ObservationId', 'MediaId', 'ClassId')
LOOKUP_FIELDS <- setNames(sprintf('//%s', LOOKUP_FIELDS), LOOKUP_FIELDS)
LOOKUP_FIELDS
rm(list = ls())
gc()
library(data.table)
library(parallel)
library(xml2)
# # move all images into a single folder (do once)
# file_list <- c(
#   dir('data/external/plantnet/train_data', recursive=T, full.names=T),
#   dir('data/external/plantnet/test_data', recursive=T, full.names=T))
# for (f in file_list) {
#   fid <- strsplit(f, '/')[[1]][6]
#   if (grepl('jpg', fid)) {
#     file.rename(f, sprintf('data/external/plantnet/images/%s', fid))
#   } else {
#     file.rename(f, sprintf('data/external/plantnet/xml/%s', fid))
#   }
# }
# load meta data
LOOKUP_FIELDS <- c('FileName', 'Species', 'Genus', 'Family', 'ObservationId', 'MediaId', 'ClassId')
LOOKUP_FIELDS <- setNames(sprintf('//%s', LOOKUP_FIELDS), LOOKUP_FIELDS)
lookup <- function(fid) {
x <- read_xml(fid, options='HUGE')
data.table(t(lapply(LOOKUP_FIELDS, function(f) xml_find_all(x, f) %>% xml_text())))
}
lookup <- function(fid) {
x <- read_xml(fid, options='HUGE')
data.table(t(lapply(LOOKUP_FIELDS, function(f) xml_text(xml_find_all(x, f)))))
}
meta <- rbindlist(Lapply(lookup, file_list[1:10]))
meta <- rbindlist(Lapply(lookup, file_list[1:10]))
meta <- rbindlist(lapply(lookup, file_list[1:10]))
file_list <- sprintf('data/external/plantnet/xml/%s', fid)
file_list <- dir('data/external/plantnet/xml', full.names=T)
meta <- rbindlist(lapply(lookup, file_list[1:10]))
meta <- rbindlist(lapply(file_list[1:10], lookup))
lookup <- function(fid) {
print(fid)
x <- read_xml(fid, options='HUGE')
data.table(t(lapply(LOOKUP_FIELDS, function(f) xml_text(xml_find_all(x, f)))))
}
file_list <- dir('data/external/plantnet/xml', full.names=T)
meta <- rbindlist(lapply(file_list[1:10], lookup))
fid <- "data/external/plantnet/xml/121211.xml"
print(fid)
x <- read_xml(fid, options='HUGE')
lookup <- function(fid) {
x <- tryCatch(read_xml(fid, options='HUGE'), error=function(cond) NULL)
if (is.null(x)) return(NULL)
data.table(t(lapply(LOOKUP_FIELDS, function(f) xml_text(xml_find_all(x, f)))))
}
file_list <- dir('data/external/plantnet/xml', full.names=T)
meta <- rbindlist(lapply(file_list[1:10], lookup))
meta
meta <- rbindlist(lapply(file_list[1:100], lookup))
meta <- rbindlist(lapply(file_list[1:1000], lookup))
cl <- makeCluster(7)
clusterEvalQ(cl, {library(data.table); library(xml2)})
clusterExport(cl, 'LOOKUP_FIELDS')
meta <- rbindlist(parLapply(cl, lookup, file_list[1:10]))
meta <- rbindlist(parLapply(cl, file_list[1:10], lookup))
meta
meta <- rbindlist(parLapply(cl, file_list, lookup))
fwrite(meta, 'data/external/plantnet/plantnet_meta.csv')
meta
stopCluster(cl)
# copy images into folders
for (g in unique(meta$Genus)) {
dir.create(sprintf('data/plantnet/images', g))
}
warnings()
# copy images into folders
for (g in unique(meta$Genus)) {
dir.create(sprintf('data/external/plantnet/images', g))
}
warnings()
# copy images into folders
for (g in unique(meta$Genus)) {
dir.create(sprintf('data/external/plantnet/images/', g))
}
# copy images into folders
for (g in unique(meta$Genus)) {
dir.create(sprintf('data/external/plantnet/images/%s', g))
}
sprintf('data/external/plantnet/images/%s', g)
unique(meta$Genus)
meta
meta$Genus
meta
str(meta)
lookup <- function(fid) {
x <- tryCatch(read_xml(fid, options='HUGE'), error=function(cond) NULL)
if (is.null(x)) return(NULL)
data.table(t(sapply(LOOKUP_FIELDS, function(f) xml_text(xml_find_all(x, f)))))
}
# setup cluster
cl <- makeCluster(7)
clusterEvalQ(cl, {library(data.table); library(xml2)})
clusterExport(cl, 'LOOKUP_FIELDS')
# lookup
file_list <- dir('data/external/plantnet/xml', full.names=T)
meta <- rbindlist(parLapply(cl, file_list, lookup))
stopCluster(cl)
# save
fwrite(meta, 'data/external/plantnet/plantnet_meta.csv')
str(meta)
1+1
lookup
# save
tmp <- copy(meta)
meta[, names(meta) := lapply(.SD, unlist)]
meta
meta[, FileName := unlist(FileName)]
meta
meta <- copy(tmp)
meta[, FileName := unlist(FileName)]
meta <- copy(tmp)
names(meta)
for (f in names(meta)) {
print(head(meta[[f]]))
}
for (f in names(meta)) {
print(paste(f, head(meta[[f]])))
}
for (f in names(meta)) {
print(f)
print(paste(head(meta[[f]])))
}
lookup(fid)
fid
fid <- file_list[1]
lookup(fid)
fwrite(meta, 'data/external/plantnet/plantnet_meta.csv')
x <- fread('data/external/plantnet/plantnet_meta.csv')
x
str(x)
# save
fwrite(meta,  'data/external/plantnet/plantnet_meta.csv')
meta <- fread('data/external/plantnet/plantnet_meta.csv')
meta
str(meta)
# copy images into folders
for (g in unique(meta$Genus)) {
break
print(g)
dir.create(sprintf('data/external/plantnet/images/%s', g))
for (f in meta[Genus==g, FileName]) {
file.copy(
sprintf('data/external/plantnet/tmp/%s', f),
sprintf('data/external/plantnet/images/%s/%s', g, f)
)
}
}
# copy images into folders
for (g in unique(meta$Genus)) {
print(g)
dir.create(sprintf('data/external/plantnet/images/%s', g))
for (f in meta[Genus==g, FileName]) {
break
file.copy(
sprintf('data/external/plantnet/tmp/%s', f),
sprintf('data/external/plantnet/images/%s/%s', g, f)
)
}
break
}
f
file.copy(
sprintf('data/external/plantnet/tmp/%s', f),
sprintf('data/external/plantnet/images/%s/%s', g, f)
)
# copy images into folders
for (g in unique(meta$Genus)) {
print(g)
dir.create(sprintf('data/external/plantnet/images/%s', g), F)
for (f in meta[Genus==g, FileName]) {
file.copy(
sprintf('data/external/plantnet/tmp/%s', f),
sprintf('data/external/plantnet/images/%s/%s', g, f)
)
}
}
plantnet_meta <- fread('data/external/plantnet/plantnet_meta.csv')
# load local meta
local_meta <- fread('data/plant_meta_v3.csv')
local_meta[, .(species, genus, common_name, status)]
# find intersection between local and plantnet
meta <- plantnet_meta[Genus %in% local_meta$genus]
meta
meta[, .N, by=Genus]
plantnet_meta <- fread('data/external/plantnet/plantnet_meta.csv')
# find intersection between local and plantnet
meta <- plantnet_meta[Genus %in% local_meta$genus]
meta
plantnet_meta
for (g in unique(meta$Genus)) {
dir.create(sprintf('data/plantnet/images/%s', g), F)
for (f in meta[Genus==g, FileName]) {
file.copy(
sprintf('data/external/plantnet/tmp/%s', f),
sprintf('data/images/plantnet/%s/%s', g, f)
)
}
}
warnings()
# find intersection between local and plantnet
meta <- plantnet_meta[Genus %in% local_meta$genus]
for (g in unique(meta$Genus)) {
dir.create(sprintf('data/images/plantnet/%s', g), F)
for (f in meta[Genus==g, FileName]) {
file.copy(
sprintf('data/external/plantnet/tmp/%s', f),
sprintf('data/images/plantnet/%s/%s', g, f)
)
}
}
warnings()
f
dir.create(sprintf('data/images/plantnet/%s', g))
dir.create(sprintf('data/plantnet/%s', g))
for (g in unique(meta$Genus)) {
dir.create(sprintf('data/plantnet/%s', g), F)
for (f in meta[Genus==g, FileName]) {
file.copy(
sprintf('data/external/plantnet/tmp/%s', f),
sprintf('data/plantnet/%s/%s', g, f)
)
}
}
dir('data/images/', recursive=T)
DT <- data.table(fid = dir('data/images/', recursive=T))
DT[, id    := sapply(fid, function(f) strsplit(f, '/')[[1]][2])]
DT[, genus := sapply(fid, function(f) strsplit(f, '/')[[1]][1])]
DT
DT[, .N, keyby=genus]
DT[, .N, keyby=genus][.N>100]
DT[, .N, keyby=genus][N>100]
DT[, .N, keyby=genus][N>=100]
DT[, .N, keyby=genus][N<=100]
DT[, .N, keyby=genus][N>=100]
DT[, .N, keyby=genus][N<100]
DT[, .N, keyby=genus]
DT[, .N, keyby=genus][N>=100]
DT[, .N, keyby=genus][N<100]
# find intersection between local and plantnet
meta <- plantnet_meta[Genus %in% local_meta$genus]
meta
local_meta[genus %in% unique(plantnet_meta$genus)]
local_meta[genus %in% unique(plantnet_meta$Genus)]
names(local_meta)
local_meta[genus %in% unique(plantnet_meta$Genus), .(
genus, hawaiian_name, common_name, status
)]
local_meta[genus %in% DT[, .N, keyby=genus][N>=100, genus], .(
genus, hawaiian_name, common_name, status
)]
local_meta[genus %in% DT[, .N, keyby=genus][N<100, genus], .(
genus, hawaiian_name, common_name, status
)]
DT[, .N, keyby=genus]
DT[, .(image_count=.N), keyby=genus]
counts <- DT[, .(image_count=.N), keyby=genus]
local_meta[counts, image_count=image_count, on='genus']
local_meta[counts, image_count:=image_count, on='genus']
local_meta
local_meta[image_count == 0, image_count := 0]
local_meta
local_meta[is.na(image_count), image_count := 0]
local_meta
fwrite(local_meta, 'data/plant_meta_v4.csv')
local_meta
# add counts to meta data
DT <- data.table(fid = dir('data/images/', recursive=T))
DT[, genus := sapply(fid, function(f) strsplit(f, '/')[[1]][1])]
DT[, id    := sapply(fid, function(f) strsplit(f, '/')[[1]][2])]
counts <- DT[, .(image_count=.N), keyby=genus]
local_meta[counts, image_count:=image_count, on='genus']
local_meta[is.na(image_count), image_count := 0]
fwrite(local_meta, 'data/plant_meta_v4.csv')
local_meta
DT[, .N]
DT[, .(plant_name)
local_meta[, .(species, genus, common_name, status)]
# add counts to meta data
DT <- data.table(fid = dir('data/images/', recursive=T))
DT[, genus := sapply(fid, function(f) strsplit(f, '/')[[1]][1])]
DT[, id    := sapply(fid, function(f) strsplit(f, '/')[[1]][2])]
counts <- DT[, .(image_count=.N), keyby=genus]
local_meta[counts, image_count:=image_count, on='genus']
local_meta[is.na(image_count), image_count := 0]
fwrite(local_meta, 'data/plant_meta_v4.csv')
DT
local_meta[, .(species, genus, common_name, status)]
# load data
canoe_meta <- fread('data/canoe_meta.csv')
local_meta <- fread('data/meta_data_v3.csv')
local_meta <- fread('data/metadata_v3.csv')
# add counts to meta data
DT <- data.table(fid = dir('data/images/', recursive=T))
DT[, genus := sapply(fid, function(f) strsplit(f, '/')[[1]][1])]
DT[, id    := sapply(fid, function(f) strsplit(f, '/')[[1]][2])]
counts <- DT[, .(image_count=.N), keyby=genus]
local_meta[counts, image_count:=image_count, on='genus']
# load data
local_meta <- rbind(
fread('data/canoe_meta.csv'),
fread('data/metadata_v3.csv')
)
# add counts to meta data
DT <- data.table(fid = dir('data/images/', recursive=T))
DT[, genus := sapply(fid, function(f) strsplit(f, '/')[[1]][1])]
DT[, id    := sapply(fid, function(f) strsplit(f, '/')[[1]][2])]
counts <- DT[, .(image_count=.N), keyby=genus]
local_meta[counts, image_count:=image_count, on='genus']
local_meta[is.na(image_count), image_count := 0]
fwrite(local_meta, 'data/metadata_v4.csv')
local_meta[, .(species, genus, common_name, status)]
local_meta[, .(genus, hawaiian_name, common_name, status, image_count)]
# load data
local_meta <- rbind(
fread('data/canoe_meta.csv'),
fread('data/local_meta_v3.csv')
)
# add counts to meta data
DT <- data.table(fid = dir('data/images/', recursive=T))
DT[, genus := sapply(fid, function(f) strsplit(f, '/')[[1]][1])]
DT[, id    := sapply(fid, function(f) strsplit(f, '/')[[1]][2])]
counts <- DT[, .(image_count=.N), keyby=genus]
local_meta[counts, image_count:=image_count, on='genus']
local_meta[is.na(image_count), image_count := 0]
fwrite(local_meta, 'data/local_meta_v4.csv')
local_meta[, .(genus, hawaiian_name, common_name, status, image_count)]
setorder(local_meta, -image_count)
fwrite(local_meta, 'data/local_meta_v4.csv')
local_meta[, .(genus, hawaiian_name, common_name, status, image_count)]
# load data
local_meta <- rbind(
fread('data/canoe_meta.csv'),
fread('data/local_meta_v3.csv')
)
# add counts to meta data
DT <- data.table(fid = dir('data/images/', recursive=T))
DT[, genus := sapply(fid, function(f) strsplit(f, '/')[[1]][1])]
DT[, id    := sapply(fid, function(f) strsplit(f, '/')[[1]][2])]
counts <- DT[, .(image_count=.N), keyby=genus]
local_meta[counts, image_count:=image_count, on='genus']
local_meta[is.na(image_count), image_count := 0]
setorder(local_meta, -image_count)
fwrite(local_meta, 'data/local_meta_v4.csv')
local_meta[, .(genus, hawaiian_name, common_name, status, image_count)]
tail(local_meta[, .(genus, hawaiian_name, common_name, status, image_count)], 67)
tail(local_meta[, .(genus, hawaiian_name, common_name, status, image_count)], 7)
tail(local_meta[, .(genus, status, image_count)], 7)
